(function(c,w){typeof exports=="object"&&typeof module<"u"?w(exports,require("@dzangolab/fastify-mercurius"),require("fastify-plugin"),require("mercurius"),require("mercurius-auth"),require("@fastify/cors"),require("@fastify/formbody"),require("supertokens-node"),require("supertokens-node/framework/fastify"),require("supertokens-node/recipe/session/framework/fastify"),require("supertokens-node/recipe/session"),require("supertokens-node/recipe/thirdpartyemailpassword"),require("@dzangolab/fastify-slonik"),require("supertokens-node/recipe/userroles"),require("@dzangolab/fastify-mailer"),require("validator"),require("zod")):typeof define=="function"&&define.amd?define(["exports","@dzangolab/fastify-mercurius","fastify-plugin","mercurius","mercurius-auth","@fastify/cors","@fastify/formbody","supertokens-node","supertokens-node/framework/fastify","supertokens-node/recipe/session/framework/fastify","supertokens-node/recipe/session","supertokens-node/recipe/thirdpartyemailpassword","@dzangolab/fastify-slonik","supertokens-node/recipe/userroles","@dzangolab/fastify-mailer","validator","zod"],w):(c=typeof globalThis<"u"?globalThis:c||self,w(c.DzangolabFastifyUser={},c.DzangolabFastifyMercurius,c.FastifyPlugin,c.Mercurius,c.MercuriusAuth,c.FastifyCors,c.FastifyFormbody,c.SupertokensNode,c.SupertokensFastify,c.SupertokensSessionFastify,c.SupertokensSession,c.SupertokensThirdPartyEmailPassword,c.DzangolabFastifySlonik,c.SupertokensUserRoles,c.DzangolabFastifyMailer,c.validator,c.zod))})(this,function(c,w,U,v,C,L,N,k,E,q,h,l,y,m,le,R,b){"use strict";const A=U(async e=>{e.config.mercurius.enabled&&e.register(C,{async applyPolicy(r,t,i,a){if(!a.user){const n=new v.ErrorWithProps("unauthorized");return n.statusCode=200,n}return!0},authDirective:"auth"})}),M=()=>({}),T=e=>{const s=e.config.user.supertokens.recipes;return s&&s.session?h.init(s.session(e)):h.init(M())};let $=class extends y.DefaultSqlFactory{};class S extends y.BaseService{static LIMIT_DEFAULT=20;static LIMIT_MAX=50;get table(){return this.config.user?.table?.name||"users"}get factory(){if(!this.table)throw new Error("Service table is not defined");return this._factory||(this._factory=new $(this)),this._factory}}const z=(e,s)=>{const{config:r,log:t,slonik:i}=s;return async a=>{const n=await e.emailPasswordSignIn(a);if(n.status!=="OK")return n;const u=new S(r,i);let o;if(o=await u.findById(n.user.id),!o&&(o=await u.create({id:n.user.id,email:n.user.email}),!o))throw t.error(`Unable to create user ${n.user.id}`),new Error(`Unable to create user ${n.user.id}`);return{status:"OK",user:{...n.user,...o}}}},O=async({fastify:e,subject:s,templateData:r={},templateName:t,to:i})=>{const{config:a,mailer:n,log:u}=e;return n.sendMail({subject:s,templateName:t,to:i,templateData:{appName:a.appName,...r}}).catch(o=>{throw u.error(o.stack),{name:"SEND_EMAIL",message:o.message,statusCode:500}})},B=(e,s)=>{const{config:r,log:t,slonik:i}=s;return async a=>{if(r.user.features?.signUp===!1)throw{name:"SIGN_UP_DISABLED",message:"SignUp feature is currently disabled",statusCode:404};const n=await e.emailPasswordSignUp(a);if(n.status==="OK"){const o=await new S(r,i).create({id:n.user.id,email:n.user.email});if(!o)throw t.error(`Unable to create user ${n.user.id}`),new Error(`Unable to create user ${n.user.id}`);n.user={...n.user,...o};const d=await m.addRoleToUser(n.user.id,r.user.role||"USER");d.status!=="OK"&&t.error(d.status)}if(r.user.supertokens.sendUserAlreadyExistsWarning&&n.status==="EMAIL_ALREADY_EXISTS_ERROR")try{await O({fastify:s,subject:"Duplicate Email Registration",templateData:{emailId:a.email},templateName:"duplicate-email-warning",to:a.email})}catch(u){t.error(u)}return n}},K=(e,s)=>b.z.string({required_error:e.required}).refine(r=>R.isEmail(r,s||{}),{message:e.invalid}),I={minLength:8,minLowercase:0,minUppercase:0,minNumbers:0,minSymbols:0,returnScore:!1,pointsPerUnique:1,pointsPerRepeat:.5,pointsForContainingLower:10,pointsForContainingUpper:10,pointsForContainingNumber:10,pointsForContainingSymbol:10},H=(e,s)=>{const r={...I,...s};return b.z.string({required_error:e.required}).refine(t=>R.isStrongPassword(t,r),{message:e.weak})},W=(e,s)=>{const r=K({invalid:"Email is invalid",required:"Email is required"},s.user.email).safeParse(e);return r.success?{success:!0}:{message:r.error.issues[0].message,success:!1}},j=e=>{let s="Password is too weak";if(!e)return s;const r=[];if(e.minLength){const t=e.minLength;r.push(`minimum ${t} ${t>1?"characters":"character"}`)}if(e.minLowercase){const t=e.minLowercase;r.push(`minimum ${t} ${t>1?"lowercases":"lowercase"}`)}if(e.minUppercase){const t=e.minUppercase;r.push(`minimum ${t} ${t>1?"uppercases":"uppercase"}`)}if(e.minNumbers){const t=e.minNumbers;r.push(`minimum ${t} ${t>1?"numbers":"number"}`)}if(e.minSymbols){const t=e.minSymbols;r.push(`minimum ${t} ${t>1?"symbols":"symbol"}`)}if(r.length>0){s="Password should contain ";const t=r.pop();r.length>0&&(s+=r.join(", ")+" and "),s+=t}return s},F=(e,s)=>{const r=s.user.password,t=H({required:"Password is required",weak:j({...I,...r})},r).safeParse(e);return t.success?{success:!0}:{message:t.error.issues[0].message,success:!1}},J=e=>[{id:"email",validate:async s=>{const r=W(s,e);if(!r.success)return r.message}},{id:"password",validate:async s=>{const r=F(s,e);if(!r.success)return r.message}}],G=e=>{let s=[];if(typeof e.user.supertokens?.recipes?.thirdPartyEmailPassword=="object"){const t=e.user.supertokens?.recipes?.thirdPartyEmailPassword.signUpFeature?.formFields;t&&(s=[...t])}const r=new Set(s.map(t=>t.id));for(const t of J(e))r.has(t.id)||s.push(t);return s},V=e=>{let s;try{if(s=new URL(e).origin,!s||s==="null")throw new Error("Origin is empty")}catch{s=""}return s},X=(e,s)=>{const r=s.config.appOrigin[0],t="/reset-password";return async i=>{const a=i.userContext._default.request.request,n=a.headers.referer||a.headers.origin||a.hostname,u=V(n)||r,o=i.passwordResetLink.replace(r+"/auth/reset-password",u+(s.config.user.supertokens.resetPasswordPath||t));await O({fastify:s,subject:"Reset Password",templateName:"reset-password",to:i.user.email,templateData:{passwordResetLink:o}})}},Q=(e,s)=>{const{config:r,log:t,slonik:i}=s;return async a=>{if(!await l.getUserByThirdPartyInfo(a.thirdPartyId,a.thirdPartyUserId,a.userContext)&&r.user.features?.signUp===!1)throw{name:"SIGN_UP_DISABLED",message:"SignUp feature is currently disabled",statusCode:404};const u=await e.thirdPartySignInUp(a);if(u.status==="OK"&&u.createdNewUser){const o=await m.addRoleToUser(u.user.id,r.user.role||"USER");o.status!=="OK"&&t.error(o.status)}return u}},Y=(e,s)=>{const{config:r,log:t,slonik:i}=s;return async a=>{if(e.thirdPartySignInUpPOST===void 0)throw new Error("Should never come here");const n=await e.thirdPartySignInUpPOST(a);if(n.status==="OK"){const u=new S(r,i);let o;if(o=await u.findById(n.user.id),!o&&(o=await u.create({id:n.user.id,email:n.user.email}),!o))throw t.error(`Unable to create user ${n.user.id}`),new Error(`Unable to create user ${n.user.id}`);return{status:"OK",createdNewUser:n.createdNewUser,user:{...n.user,...o},session:n.session,authCodeResponse:n.authCodeResponse}}return n}},Z=e=>{const{Apple:s,Facebook:r,Github:t,Google:i}=l,a=e.user.supertokens.providers,n=[],u=[{name:"google",initProvider:i},{name:"github",initProvider:t},{name:"facebook",initProvider:r},{name:"apple",initProvider:s}];for(const o of u)a?.[o.name]&&n.push(o.initProvider(a[o.name]));return n},x=e=>{const{config:s}=e;let r={};return typeof s.user.supertokens.recipes?.thirdPartyEmailPassword=="object"&&(r=s.user.supertokens.recipes.thirdPartyEmailPassword),{override:{apis:t=>{const i={};if(r.override?.apis){const a=r.override.apis;let n;for(n in a){const u=a[n];u&&(i[n]=u(t,e))}}return{...t,thirdPartySignInUpPOST:Y(t,e),...i}},functions:t=>{const i={};if(r.override?.functions){const a=r.override.functions;let n;for(n in a){const u=a[n];u&&(i[n]=u(t,e))}}return{...t,emailPasswordSignIn:z(t,e),emailPasswordSignUp:B(t,e),thirdPartySignInUp:Q(t,e),...i}}},signUpFeature:{formFields:G(s)},emailDelivery:{override:t=>{let i;return r?.sendEmail&&(i=r.sendEmail),{...t,sendEmail:i?i(t,e):X(t,e)}}},providers:Z(s)}},ee=e=>{const s=e.config.user.supertokens.recipes?.thirdPartyEmailPassword;return typeof s=="function"?l.init(s(e)):l.init(x(e))},se=()=>({}),re=e=>{const s=e.config.user.supertokens.recipes;return s&&s.userRoles?m.init(s.userRoles(e)):m.init(se())},te=e=>[T(e),ee(e),re(e)],ne=e=>{const{config:s}=e;k.init({appInfo:{apiDomain:s.baseUrl,appName:s.appName,websiteDomain:s.appOrigin[0]},recipeList:te(e),supertokens:{connectionURI:s.user.supertokens.connectionUri}})},ie=U(async(e,s,r)=>{const{config:t,log:i}=e;i.info("Registering supertokens plugin"),ne(e),e.setErrorHandler(E.errorHandler()),e.register(L,{origin:t.appOrigin,allowedHeaders:["Content-Type","st-auth-mode",...k.getAllCORSHeaders()],credentials:!0}),e.register(N),e.register(E.plugin),i.info("Registering supertokens plugin complete"),e.decorate("verifySession",q.verifySession),r()}),oe=async(e,s,r)=>{const{config:t,slonik:i}=s,n=(await h.getSession(s,E.wrapResponse(r),{sessionRequired:!1}))?.getUserId();if(n){const u=new S(t,i),o=await l.getUserById(n);if(o){let d=null;const{roles:g}=await m.getRolesForUser(n);try{d=await u.findById(n)}catch{}if(!d)throw new Error("Unable to find user profile");const f={...o,profile:d,roles:g};e.user=f}}},D=U(async(e,s,r)=>{const{mercurius:t}=e.config;await e.register(ie),t.enabled&&await e.register(A),r()});D.updateContext=oe;class ae extends y.DefaultSqlFactory{}class p extends y.BaseService{constructor(s,r){super(s,r)}static LIMIT_DEFAULT=20;static LIMIT_MAX=50;get table(){return this.config.user?.table?.name||"users"}get factory(){if(!this.table)throw new Error("Service table is not defined");return this._factory||(this._factory=new ae(this)),this._factory}changePassword=async(s,r,t)=>{const i=F(t,this.config);if(!i.success)return{status:"FIELD_ERROR",message:i.message};const a=await l.getUserById(s);if(r&&t)if(a)if((await l.emailPasswordSignIn(a.email,r)).status==="OK"){if(await l.updateEmailOrPassword({userId:s,password:t}))return await h.revokeAllSessionsForUser(s),{status:"OK"};throw{status:"FAILED",message:"Oops! Something went wrong, couldn't change password"}}else return{status:"INVALID_PASSWORD",message:"Invalid password"};else throw{status:"NOT_FOUND",message:"User not found"};else return{status:"FIELD_ERROR",message:"Password cannot be empty"}}}const ue={Mutation:{changePassword:async(e,s,r)=>{const t=new p(r.config,r.database);try{return r.user?.id?await t.changePassword(r.user?.id,s.oldPassword,s.newPassword):{status:"NOT_FOUND",message:"User not found"}}catch(i){r.app.log.error(i);const a=new v.ErrorWithProps("Oops, Something went wrong");return a.statusCode=500,a}}},Query:{me:async(e,s,r)=>{const t=new p(r.config,r.database);if(r.user?.id)return t.findById(r.user.id);{r.app.log.error("Could not able to get user id from mercurius context");const i=new v.ErrorWithProps("Oops, Something went wrong");return i.statusCode=500,i}},user:async(e,s,r)=>await new p(r.config,r.database).findById(s.id),users:async(e,s,r)=>await new p(r.config,r.database).list(s.limit,s.offset,s.filters?JSON.parse(JSON.stringify(s.filters)):void 0,s.sort?JSON.parse(JSON.stringify(s.sort)):void 0)}},ce=async(e,s,r)=>{const t="/change_password",i="/me",a="/users";e.get(a,{preHandler:e.verifySession()},async(n,u)=>{const o=new p(n.config,n.slonik),{limit:d,offset:g,filters:f,sort:P}=n.query,_=await o.list(d,g,f?JSON.parse(f):void 0,P?JSON.parse(P):void 0);u.send(_)}),e.post(t,{preHandler:e.verifySession()},async(n,u)=>{try{const o=n.session,d=n.body,g=o&&o.getUserId();if(!g)throw new Error("User not found in session");const f=d.oldPassword??"",P=d.newPassword??"",de=await new p(n.config,n.slonik).changePassword(g,f,P);u.send(de)}catch(o){e.log.error(o),u.status(500),u.send({status:"ERROR",message:"Oops! Something went wrong",error:o})}}),e.get(i,{preHandler:e.verifySession()},async(n,u)=>{const o=new p(n.config,n.slonik),d=n.session?.getUserId();if(d)u.send(await o.findById(d));else throw e.log.error("Could not able to get user id from session"),new Error("Oops, Something went wrong")}),r()};c.UserService=p,c.default=D,c.userResolver=ue,c.userRoutes=ce,Object.defineProperties(c,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
